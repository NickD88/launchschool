#! /usr/bin/env ruby

require "pg"
require "pry"
require "io/console"

class ExpenseData 
  def initialize
    @connection = PG.connect(dbname: "expense")
    setup_schema
  end

  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';"
    result = @connection.exec(sql)

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL CHECK(amount > 0),
          memo text NOT NULL,
          created_on date NOT NULL
          );
      SQL
    end
  end

  def list_expenses
    results = @connection.exec("SELECT * FROM expenses")
    display_count(results)
    display_expenses(results) if expense_exists?(results)
  end 

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expense(query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    results = @connection.exec_params(sql, ["%#{query}%"])

    if expense_exists?(results)
      display_expenses(results)
    else
      puts "There are no expenses."
    end
  end

  def delete_expense(id)
    sql_delete = "DELETE FROM expenses WHERE id = $1"
    sql_select = "SELECT * FROM expenses WHERE id = $1"
    selection = @connection.exec_params(sql_select, [id])

    if expense_exists?(selection)
      results = @connection.exec_params(sql_delete, [id])
      puts "The following expense has been deleted"
      display_expenses(selection)
    else
      puts "There is no expense with the id of '#{id}'."
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All Expenses have been deleted."
  end

  private

  def expense_exists?(results)
    results.ntuples > 0
  end

  def display_count(results)
    count = results.ntuples
    if count == 0
      puts "There are no expensess"
    else
      puts "There are #{count} expense#{"s" if count != 1 }."
    end
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]
      puts columns.join(" | ")
    end

    puts "-" * 50

    amount_sum = expenses.field_values("amount").map(&:to_f).inject(:+)

    puts "Total #{amount_sum.to_s.rjust(25)}"
  end
end

class CLI

  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift
    case command
    when "list"
      @application.list_expenses
    when "add"
      amount = arguments[0]
      memo = arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when "search"
      @application.search_expense(arguments[0])
    when "delete"
      @application.delete_expense(arguments[0])
    when "clear"
      @application.delete_all_expenses if confirm_delete
    else
      display_help
    end
  end

  def confirm_delete
      puts "This will remove all expenses.  Are you sure? (y/n)"
      answer = $stdin.getch
      answer == 'y'
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end


CLI.new.run(ARGV)